model_ar = rpart(DOCTOR~ .,method = "class" ,control = mycontrol, data=data_train)
prob_test_ar=predict(model_ar,data_test,type = "prob")[,2]
pred_test_ar=prediction(prob_test_ar,data_test$DOCTOR)
perf_roc_test_ar=performance(pred_test_ar,measure = "tpr",x.measure ="fpr")
Neural = nnet(DOCTOR~ .,data = data_train,size=10,maxit=500,decay=.001, linout=F, trace = F)
fitNeural = predict(Neural,newdata=data_test)
prednn = prediction( fitNeural, data_test$DOCTOR)
perfnn = performance(prednn, "tpr", "fpr")
perf <- performance(pred_test,"lift","rpp")
plot(perf, main="lift curve", colorize=T)
perf <- performance(pred_test,"lift")
plot(perf, main="lift curve", colorize=T)
perf_lift1_test <- performance(pred_test, measure = "lift", x.measure = "rpp") #courbe de Lift
perf_lift2_test <- performance(pred_test, measure = "tpr", x.measure = "rpp") #courbe de Lift
auc_test <- performance(pred_test, measure = "auc")
#mettre les deux de Lift ensemble
plot(perf_lift1_train, col="blue", main="Courbe de Lift", xlab="RPP", ylab="SensibilitÃ© (tpr)",
bg="white",cex.main=1,cex.lab=1,lwd=3)
#Calcul des indicateurs pour la base train
prob_train=predict(logit,data_train,type = "response")
pred_train <- prediction(prob_train, data_train$y)
pred_train <- prediction(prob_train, data_train$DOCVIS)
pred_train <- prediction(prob_train, data_train$DOCTOR)
perf_roc_train <- performance(pred_train, measure = "tpr", x.measure = "fpr")
perf_lift1_train <- performance(pred_train, measure = "lift", x.measure = "rpp") #courbe de Lift
perf_lift2_train <- performance(pred_train, measure = "tpr", x.measure = "rpp") #courbe de Lift
auc_train <- performance(pred_train, measure = "auc")
perf_roc_test=performance(pred_test,measure = "tpr",x.measure ="fpr")
perf_lift1_test <- performance(pred_test, measure = "lift", x.measure = "rpp") #courbe de Lift
perf_lift2_test <- performance(pred_test, measure = "tpr", x.measure = "rpp") #courbe de Lift
auc_test <- performance(pred_test, measure = "auc")
#mettre les deux de Lift ensemble
plot(perf_lift1_train, col="blue", main="Courbe de Lift", xlab="RPP", ylab="SensibilitÃ© (tpr)",
bg="white",cex.main=1,cex.lab=1,lwd=3)
lines(perf_lift1_test@x.values[[1]],perf_lift1_test@y.values[[1]],col="red",lwd=2)
text(1,.25,labels="__ train",adj=1,col = "blue")
text(1,.15,labels="__ test",adj=1,col = "red")
couverture <- read_excel("C:/Users/Missaoui Aymen/Desktop/Econometrie assurance/couverture d'assurance.xlsx")
couverture <- read_excel("D:/EAD/kouki/Econometrie assurance/couverture d'assurance.xlsx")
#Variables
#AGE: integer age of policyholder
#SENIORITY: number of years at company
#MEN: 1 = male, 0 = female
#URBAN: 1= urban environment, 0 = rural environment
#PRIVATE: 1 = private use, 0 = commercial use
#MARTIAL: "c" = married couple, "s" = single, "o" = other
#Y: dependent, or response variable, 1 = full coverage, 0 = not full coverage
#Y2: 1=full, 2=Not full
couverture$y2<-ifelse(couverture$y==0,2,1)
couverture$y2<-as.factor(couverture$y2)
couverture$y1=couverture$y
couverture$men <- factor(couverture$men)
couverture$urban <- factor(couverture$urban)
couverture$private <- factor(couverture$private)
couverture$y <- factor(couverture$y)
couverture$marital <- factor(couverture$marital)
attach(couverture)
summary(couverture)
plot(density(age))
plot(density(seniority))
plot <- ggplot(data=couverture, aes(x=age, y=seniority, col=y))+
geom_point(aes(size = 1))+
xlab("Age") + ylab("Seniority") +
scale_color_discrete(name = "Gender")
plot
#ModÃ¨le logit, ROC, AUC base globale
logit_g <- step(glm(y~men+urban+private+marital+age+seniority,data=couverture,family=binomial))
summary(logit_g)
summary(logit_g)$coefficient
library(aod)
## Intervalle de confiance des paramÃ¨tres
ci=confint(logit_g)
#Testde significativitÃ© globale
wald.test(b = coef(logit_g), Sigma = vcov(logit_g), Terms = 2:6)
#ODD Ratio
or=exp(coef(logit_g))
## odds ratios et intervalle de confiance des OR CI
exp(cbind(or,ci))
#library Deducer
roc_ful_g<-rocplot(logit_g)
roc_ful_g
library(Deducer)
library(caret)
library(ROCR)
library(pROC)
library(readxl)
library(aod)
#library Deducer
roc_ful_g<-rocplot(logit_g)
library(Deducer)
#library pROC
prob=predict(logit_g,couverture,type = "response") #Calcul des probabilitÃ©
couverture$prob<-prob
roc_g<-roc(couverture$y, couverture$prob,print.auc=TRUE,ci=TRUE,boot.n=1000,smooth=FALSE)
plot(roc_g,grid=TRUE)
auc_proc_g=auc(roc_g) #Aire sous la courbe _ Area Under Curve
auc_proc_g
ci=ci(roc_g)
text(0.5,0.7,paste("AUC =",round(auc_proc_g,digits = 3)))
ci
#Library ROCR
prob_g=predict(logit_g,couverture,type = "response")
pred_g <- prediction(prob_g, couverture$y)
perf_rocr_g <- performance(pred_g, measure = "tpr", x.measure = "fpr") #courbe roc
perf_lift1_g <- performance(pred_g, measure = "lift", x.measure = "rpp") #courbe de Lift
perf_lift2_g <- performance(pred_g, measure = "tpr", x.measure = "rpp") #courbe de Lift
perf_auc_g <- performance(pred_g, measure = "auc") #AUC
perf_mat_g <- performance(pred_g, measure = "mat") #Ceofficient de corrÃ©lation de Matthews
plot(perf_rocr_g,main="Courbe ROC",col="blue",xlab="Taux des faux positif",ylab="Taux des vraix positif")
abline(0,1,col="gray",lty=2)
text(0.5,0.7,paste("AUC = ",round(perf_auc_g@y.values[[1]],digits = 3)))
#Courbe de Lift
plot(perf_lift1_g,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs")
plot(perf_lift2_g,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs",col="red")
segments(0,0,1,1,col="blue")
plot(perf_mat_g,main="Coefficient de corrÃ©lation de Mathews",col="blue",cex.main=1.1,xlab="Seuil")
prediction<-as.numeric(pred_g@predictions[[1]]>=0.289)
confusionMatrix(couverture$y,prediction)
perf_roc_test=performance(pred_test,measure = "tpr",x.measure ="fpr")
perf_lift1_test <- performance(pred_test, measure = "lift", x.measure = "rpp") #courbe de Lift
perf_lift2_test <- performance(pred_test, measure = "tpr", x.measure = "rpp") #courbe de Lift
#Courbe de Lift
plot(perf_lift1_g,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs")
German_health_care_data$FEMALE<-ifelse(German_health_care_data$FEMALE==2,0,1)
setwd("D:/EAD/kouki/Projet Econometrie 2020/Projet Econometrie")
German_health_care_data <- read_excel("German-health-care_data.xlsx")
German_health_care_data$FEMALE<-ifelse(German_health_care_data$FEMALE==2,0,1)
German_health_care_data$FEMALE=factor(German_health_care_data$FEMALE)
German_health_care_data$DOCTOR<-ifelse(German_health_care_data$DOCTOR==2,0,1)
German_health_care_data$DOCTOR=factor(German_health_care_data$DOCTOR)
German_health_care_data$HHKIDS<-ifelse(German_health_care_data$HHKIDS==2,0,1)
German_health_care_data$HHKIDS=factor(German_health_care_data$HHKIDS)
German_health_care_data$WORKING<-ifelse(German_health_care_data$WORKING==2,0,1)
German_health_care_data$WORKING=factor(German_health_care_data$WORKING)
data=German_health_care_data
data=subset(German_health_care_data,German_health_care_data$YEAR==1994)
data=data[,-c(1,3)]
dataQuali=data[,c(1,4,6,10)]
dataQuanti=data[,-c(1,4,6,10)]
data=data.frame(data)
attach(data)
str(data)
train_id=sample(dim(data)[1],round(dim(data)[1]*0.75))
data_train=data[train_id,]
data_test=data[-train_id,]
logit=glm(DOCTOR~.,data = data_train,family = binomial)
prob_test=predict(logit,data_test,type = "response")
pred_test=prediction(prob_test,data_test$DOCTOR)
#Calcul des indicateurs pour la base train
prob_train=predict(logit,data_train,type = "response")
pred_train <- prediction(prob_train, data_train$DOCTOR)
perf_roc_train <- performance(pred_train, measure = "tpr", x.measure = "fpr")
perf_lift1_train <- performance(pred_train, measure = "lift", x.measure = "rpp") #courbe de Lift
perf_lift2_train <- performance(pred_train, measure = "tpr", x.measure = "rpp") #courbe de Lift
auc_train <- performance(pred_train, measure = "auc")
perf_roc_test=performance(pred_test,measure = "tpr",x.measure ="fpr")
perf_lift1_test <- performance(pred_test, measure = "lift", x.measure = "rpp") #courbe de Lift
perf_lift2_test <- performance(pred_test, measure = "tpr", x.measure = "rpp") #courbe de Lift
auc_test <- performance(pred_test, measure = "auc")
#Courbe de Lift
plot(perf_lift1_g,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs")
plot(perf_lift2_g,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs",col="red")
#Courbe de Lift
plot(perf_lift1_train,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs")
plot(perf_lift2_train,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs",col="red")
segments(0,0,1,1,col="blue")
plot(perf_mat_g,main="Coefficient de corrÃ©lation de Mathews",col="blue",cex.main=1.1,xlab="Seuil")
perf_auc_g <- performance(pred_train, measure = "auc") #AUC
perf_mat_g <- performance(pred_train, measure = "mat") #Ceofficient de corrÃ©lation de Matthews
plot(perf_mat_g,main="Coefficient de corrÃ©lation de Mathews",col="blue",cex.main=1.1,xlab="Seuil")
prediction<-as.numeric(pred_g@predictions[[1]]>=0.289)
prediction<-as.numeric(pred_train@predictions[[1]]>=0.289)
confusionMatrix(couverture$y,prediction)
confusionMatrix(data_train$DOCTOR,prediction)
#Calcul des indicateurs pour la base test
prob_test=predict(logit,data_test,type = "response")
pred_test <- prediction(prob_test, data_train$DOCTOR)
pred_test <- prediction(prob_test, data_test$DOCTOR)
perf_roc_test <- performance(pred_test, measure = "tpr", x.measure = "fpr")
perf_lift1_test <- performance(pred_test, measure = "lift", x.measure = "rpp") #courbe de Lift
perf_lift2_test <- performance(pred_test, measure = "tpr", x.measure = "rpp") #courbe de Lift
auc_test <- performance(pred_test, measure = "auc")
perf_auc_g <- performance(pred_test, measure = "auc") #AUC
perf_mat_g <- performance(pred_test, measure = "mat") #Ceofficient de corrÃ©lation de Matthews
perf_roc_test=performance(pred_test,measure = "tpr",x.measure ="fpr")
perf_lift1_test <- performance(pred_test, measure = "lift", x.measure = "rpp") #courbe de Lift
perf_lift2_test <- performance(pred_test, measure = "tpr", x.measure = "rpp") #courbe de Lift
auc_test <- performance(pred_test, measure = "auc")
#Courbe de Lift
plot(perf_lift1_test,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs")
plot(perf_lift2_test,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs",col="red")
segments(0,0,1,1,col="blue")
plot(perf_mat_g,main="Coefficient de corrÃ©lation de Mathews",col="blue",cex.main=1.1,xlab="Seuil")
prediction<-as.numeric(pred_train@predictions[[1]]>=0.289)
confusionMatrix(data_train$DOCTOR,prediction)
confusionMatrix(data_test$DOCTOR,prediction)
#Courbe de Lift
plot(perf_lift1_test,main="Courbe de Lift",xlab="RPP",ylab="Taux des Vraix Positifs")
runApp()
runApp()
runApp()
vif(logit)
library(car)
vif(logit)
str(data)
logit=glm(DOCTOR~.,data = data,family = binomial)
vif(logit)
?vif
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(plotly)
#
df<-function(data,classe,colonne)
{
df=NULL
variab=data[,colonne]
if(length(classe)<=1){
df=cbind(df,ifelse(variab<classe,1,0))
df=cbind(df,ifelse(variab>=classe,1,0))
df=data.frame(df)
colnames(df)=paste(c('inf','sup'),colonne, classe,sep = '')
}
else{
for (i in 1:(length(classe)-1)) {
d=ifelse((variab<classe[i+1])&(variab>=classe[i]),1,0)
df=cbind(df,d)
}
df=cbind(ifelse(variab<classe[1],1,0),df)
df=cbind(df,if_else(variab>=classe[length(classe)],1,0))
df=data.frame(df)
noms=paste('inf',colonne,classe[1],sep = '')
for (i in 2:(length(classe))) {
noms=c(noms,paste(colonne,classe[i-1],classe[i],sep = '.'))
}
noms=c(noms,paste('sup',colonne, classe[length(classe)],sep = ''))
colnames(df)=noms
}
return(df)
}
factor.tranform=function(d){
for(i in 1:ncol(d)){
d[,i]=as.factor(d[,i])
}
return(d)
}
formClasseEtSupColonne=function(data,colonne,classe){
attach(data)
variab=data[,colonne]
d=df(data,classe,colonne)
d=factor.tranform(d)
data=data[,!colnames(data)==colonne]
data=cbind(data,d)
return(data)
}
PieGraph=function(data,colonne,modalite,titreGraph){
variable=data[,colonne]
#modalite=c("OUI","NON")
d=data.frame(table(variable))
if(nlevels(variable)==length(modalite)){
d$Quali=ifelse(d$variable==1,modalite[1],modalite[2])
}
labels = d$Quali
values = d$Freq
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label+percent',
insidetextorientation='radial')
fig=fig %>% layout(title = titreGraph,showlegend = T)
#fig <- fig %>% layout(title = titreGraph,xaxis = list(title = ""),yaxis = list(title = ""))
return(fig)
}
BarGraph=function(data,colonne,modalite,titreGraph){
variable=data[,colonne]
d=data.frame(table(variable))
if(nlevels(variable)==length(modalite)){
d$Quali=ifelse(d$variable==1,modalite[1],modalite[2])
}
labels = d$Quali
values = d$Freq
fig <- plot_ly(data, x = ~labels, y = ~values, type = 'bar',
text = values, textposition = 'auto'
#,marker = list(color = 'rgb(158,202,225)',
#               line = list(color = 'rgb(8,48,107)', width = 1.5))
)
fig <- fig %>% layout(title = titreGraph,xaxis = list(title = ""),yaxis = list(title = ""))
return(fig)
}
Scatter.Line.Graph=function(data,x,y,titreGraph){
#assign(x,data[,x])
#assign(y,data[,y])
#fig <- plot_ly(data = data, x =~ x, y = ~y)
x = formula(paste('~',x,sep = ''))
y = formula(paste('~',y,sep = ''))
fig <- plot_ly(data = data, x = x, y = y,type = 'scatter')
fig <- fig %>% layout(title = titreGraph)
return(fig)
}
Density.Graph=function(data,x,titreGraph){
dens=density(data[,x])
fig <- plot_ly(x =~dens$x,y =~dens$y, type = 'scatter', mode = 'lines',fill = 'tozeroy')
fig <- fig %>% layout(title = titreGraph,
xaxis = list(title = x),yaxis = list(title = 'Density'))
return(fig)
}
Density.Quanti.Quali.Graph=function(data,quali,quanti,modalite,titreGraph){
d=data
d$ajout=ifelse(data[,quali]==1,modalite[1],modalite[2])
d1 <- d[which(d$ajout == modalite[1]),]
density1 <- density(d1[,quanti])
d2 <- d[which(d$ajout == modalite[2]),]
density2 <- density(d2[,quanti])
name1=paste(quanti,modalite[1])
name2=paste(quanti,modalite[2])
fig <- plot_ly(x = ~density1$x, y = ~density1$y, type = 'scatter', mode = 'lines', name =name1, fill = 'tozeroy')
fig <- fig %>% add_trace(x = ~density2$x, y = ~density2$y, name = name2, fill = 'tozeroy')
fig <- fig %>% layout(title=titreGraph,xaxis = list(title = quali),
yaxis = list(title = 'Density'))
return(fig)
}
Boxplot.Graph=function(data,y,titreGraph){
y=formula(paste0('~',y))
fig <- plot_ly(y =y, type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
fig <- fig %>% layout(title=titreGraph)
return(fig)
}
Boxplot.Quali.Quanti.Graph=function(data,quali,quanti,modalite,titreGraph){
d=data
d$ajout=ifelse(data[,quali]==1,modalite[1],modalite[2])
#assign('ajout',d$ajout)
attach(d)
y=formula(paste0('~',quanti))
clr=formula(paste0('~',substitute(ajout)))
fig <- plot_ly(data, y = y, color = clr, type = "box")
fig <- fig %>% layout(title=titreGraph)
return(fig)
}
Histogramme.Graph=function(data,quanti,titreGraph){
x=formula(paste0('~',quanti))
fig <- plot_ly(x =x, type = "histogram")
fig <- fig %>% layout(title=titreGraph)
return(fig)
}
Histogramme.Quali.Quanti.Graph=function(data,quali,quanti,modalite,titreGraph){
d=data
d$ajout=ifelse(data[,quali]==1,modalite[1],modalite[2])
attach(d)
y=formula(paste0('~',quanti))
clr=formula(paste0('~',substitute(ajout)))
fig <- plot_ly(data, x = y, color = clr, type = "histogram")
return(fig)
}
##---------------------------------------------------------------
# substitute : recupere le nom de la variable
# assign( "nom", valeur) : donne ........
# get("AGE"): retourne la variable AGE
# quantile inverse: ecdf(x)(quantile(x,.75)) tq les percentiles inverses
#-------------------------------------------------------------
shiny::runApp()
library(dplyr)
library(plotly)
#
df<-function(data,classe,colonne)
{
df=NULL
variab=data[,colonne]
if(length(classe)<=1){
df=cbind(df,ifelse(variab<classe,1,0))
df=cbind(df,ifelse(variab>=classe,1,0))
df=data.frame(df)
colnames(df)=paste(c('inf','sup'),colonne, classe,sep = '')
}
else{
for (i in 1:(length(classe)-1)) {
d=ifelse((variab<classe[i+1])&(variab>=classe[i]),1,0)
df=cbind(df,d)
}
df=cbind(ifelse(variab<classe[1],1,0),df)
df=cbind(df,if_else(variab>=classe[length(classe)],1,0))
df=data.frame(df)
noms=paste('inf',colonne,classe[1],sep = '')
for (i in 2:(length(classe))) {
noms=c(noms,paste(colonne,classe[i-1],classe[i],sep = '.'))
}
noms=c(noms,paste('sup',colonne, classe[length(classe)],sep = ''))
colnames(df)=noms
}
return(df)
}
factor.tranform=function(d){
for(i in 1:ncol(d)){
d[,i]=as.factor(d[,i])
}
return(d)
}
formClasseEtSupColonne=function(data,colonne,classe){
attach(data)
variab=data[,colonne]
d=df(data,classe,colonne)
d=factor.tranform(d)
data=data[,!colnames(data)==colonne]
data=cbind(data,d)
return(data)
}
PieGraph=function(data,colonne,modalite,titreGraph){
variable=data[,colonne]
#modalite=c("OUI","NON")
d=data.frame(table(variable))
if(nlevels(variable)==length(modalite)){
d$Quali=ifelse(d$variable==1,modalite[1],modalite[2])
}
labels = d$Quali
values = d$Freq
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label+percent',
insidetextorientation='radial')
fig=fig %>% layout(title = titreGraph,showlegend = T)
#fig <- fig %>% layout(title = titreGraph,xaxis = list(title = ""),yaxis = list(title = ""))
return(fig)
}
BarGraph=function(data,colonne,modalite,titreGraph){
variable=data[,colonne]
d=data.frame(table(variable))
if(nlevels(variable)==length(modalite)){
d$Quali=ifelse(d$variable==1,modalite[1],modalite[2])
}
labels = d$Quali
values = d$Freq
fig <- plot_ly(data, x = ~labels, y = ~values, type = 'bar',
text = values, textposition = 'auto'
#,marker = list(color = 'rgb(158,202,225)',
#               line = list(color = 'rgb(8,48,107)', width = 1.5))
)
fig <- fig %>% layout(title = titreGraph,xaxis = list(title = ""),yaxis = list(title = ""))
return(fig)
}
Scatter.Line.Graph=function(data,x,y,titreGraph){
#assign(x,data[,x])
#assign(y,data[,y])
#fig <- plot_ly(data = data, x =~ x, y = ~y)
x = formula(paste('~',x,sep = ''))
y = formula(paste('~',y,sep = ''))
fig <- plot_ly(data = data, x = x, y = y,type = 'scatter')
fig <- fig %>% layout(title = titreGraph)
return(fig)
}
Density.Graph=function(data,x,titreGraph){
dens=density(data[,x])
fig <- plot_ly(x =~dens$x,y =~dens$y, type = 'scatter', mode = 'lines',fill = 'tozeroy')
fig <- fig %>% layout(title = titreGraph,
xaxis = list(title = x),yaxis = list(title = 'Density'))
return(fig)
}
Density.Quanti.Quali.Graph=function(data,quali,quanti,modalite,titreGraph){
d=data
d$ajout=ifelse(data[,quali]==1,modalite[1],modalite[2])
d1 <- d[which(d$ajout == modalite[1]),]
density1 <- density(d1[,quanti])
d2 <- d[which(d$ajout == modalite[2]),]
density2 <- density(d2[,quanti])
name1=paste(quanti,modalite[1])
name2=paste(quanti,modalite[2])
fig <- plot_ly(x = ~density1$x, y = ~density1$y, type = 'scatter', mode = 'lines', name =name1, fill = 'tozeroy')
fig <- fig %>% add_trace(x = ~density2$x, y = ~density2$y, name = name2, fill = 'tozeroy')
fig <- fig %>% layout(title=titreGraph,xaxis = list(title = quali),
yaxis = list(title = 'Density'))
return(fig)
}
Boxplot.Graph=function(data,y,titreGraph){
y=formula(paste0('~',y))
fig <- plot_ly(y =y, type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
fig <- fig %>% layout(title=titreGraph)
return(fig)
}
Boxplot.Quali.Quanti.Graph=function(data,quali,quanti,modalite,titreGraph){
d=data
d$ajout=ifelse(data[,quali]==1,modalite[1],modalite[2])
#assign('ajout',d$ajout)
attach(d)
y=formula(paste0('~',quanti))
clr=formula(paste0('~',substitute(ajout)))
fig <- plot_ly(data, y = y, color = clr, type = "box")
fig <- fig %>% layout(title=titreGraph)
return(fig)
}
Histogramme.Graph=function(data,quanti,titreGraph){
x=formula(paste0('~',quanti))
fig <- plot_ly(x =x, type = "histogram")
fig <- fig %>% layout(title=titreGraph)
return(fig)
}
Histogramme.Quali.Quanti.Graph=function(data,quali,quanti,modalite,titreGraph){
d=data
d$ajout=ifelse(data[,quali]==1,modalite[1],modalite[2])
attach(d)
y=formula(paste0('~',quanti))
clr=formula(paste0('~',substitute(ajout)))
fig <- plot_ly(data, x = y, color = clr, type = "histogram")
return(fig)
}
##---------------------------------------------------------------
# substitute : recupere le nom de la variable
# assign( "nom", valeur) : donne ........
# get("AGE"): retourne la variable AGE
# quantile inverse: ecdf(x)(quantile(x,.75)) tq les percentiles inverses
#-------------------------------------------------------------
runApp()
runApp()
